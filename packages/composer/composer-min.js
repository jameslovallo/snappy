export default t=>{class e extends HTMLElement{constructor(){super(),Object.assign(this,t),this.props&&Object.keys(this.props()).forEach((t=>{const e=this.props()[t],s=this.getAttribute(t);"function"==typeof e?this[t]=s?e(this.getAttribute(t)):s:console.error(`Handler for prop ${t} in component ${this.component} is not a function.`)})),this.DOM=this.shadow?this.attachShadow({mode:"open"}):this;const e=this.styles?`<style>${this.styles()}</style>`:"",s=this.template?this.template():"";this.DOM.innerHTML=e+s,this.parts={},this.DOM.querySelectorAll("[part]").forEach((t=>{t.on=(e,s)=>{s=s.bind(this),t.addEventListener(e,(t=>s(t)))},this.parts[t.getAttribute("part")]=t}))}connectedCallback(){this?.ready&&this.ready()}}!customElements.get(t.component)&&customElements.define(t.component,e)};